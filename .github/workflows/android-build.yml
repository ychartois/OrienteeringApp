name: Android Build

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/android-build.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: |
          npm install --legacy-peer-deps
          # Install expo and related packages explicitly
          npm install --save expo expo-dev-client

      - name: Debug node_modules
        working-directory: frontend
        run: |
          echo "Checking Expo installation..."
          ls -la node_modules/expo/
          echo "Checking Expo Android folder..."
          ls -la node_modules/expo/android || echo "Expo Android folder not found"
          echo "Searching for settings.gradle files in node_modules..."
          find node_modules -name "settings.gradle" | sort

      - name: Create app icons
        working-directory: frontend
        run: |
          mkdir -p src/assets
          # Generate placeholder icons
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Create a minimal 1x1 transparent PNG
            const iconData = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=', 'base64');
            
            // Write the icon files needed for Android build
            fs.writeFileSync(path.join('src', 'assets', 'icon.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'adaptive-icon.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'splash.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'favicon.png'), iconData);
          "

      - name: Update app.json for Android build
        working-directory: frontend
        run: |
          # Add required fields to app.json if they don't exist
          node -e "
            const fs = require('fs');
            const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            
            // Make sure expo config exists
            if (!appJson.expo) {
              appJson.expo = {};
            }
            
            // Ensure android config exists
            if (!appJson.expo.android) {
              appJson.expo.android = {};
            }
            
            // Make sure package name is set
            if (!appJson.expo.android.package) {
              appJson.expo.android.package = 'com.orienteeringapp.mobile';
            }
            
            // Save updated app.json
            fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
          "

      - name: Generate native Android project
        working-directory: frontend
        run: |
          # Use npx directly instead of global expo-cli
          npx expo prebuild --platform android --clean --no-install

      - name: Create standalone build setup
        working-directory: frontend/android
        run: |
          # Print directory structure for debugging
          echo "Current directory structure:"
          ls -la
          
          # Create a new simplified settings.gradle that doesn't depend on Expo scripts
          cat > settings.gradle << EOF
          rootProject.name = 'orienteeringapp'
          include ':app'
          
          // Include React Native modules automatically
          def reactNativeModules = new File(['node', '--print', 'require.resolve("react-native/package.json")'].execute(null, rootDir).text.trim()).getParentFile().parentFile
          include ':react-native-gradle-plugin'
          project(':react-native-gradle-plugin').projectDir = new File("\${reactNativeModules}/@react-native/gradle-plugin")
          
          // Manual inclusion of required modules
          include ':expo'
          project(':expo').projectDir = new File(rootDir, '../node_modules/expo/android')
          
          include ':expo-application'
          project(':expo-application').projectDir = new File(rootDir, '../node_modules/expo-application/android')
          
          include ':expo-constants'
          project(':expo-constants').projectDir = new File(rootDir, '../node_modules/expo-constants/android')
          
          include ':expo-file-system'
          project(':expo-file-system').projectDir = new File(rootDir, '../node_modules/expo-file-system/android')
          
          include ':expo-font'
          project(':expo-font').projectDir = new File(rootDir, '../node_modules/expo-font/android')
          
          include ':expo-keep-awake'
          project(':expo-keep-awake').projectDir = new File(rootDir, '../node_modules/expo-keep-awake/android')
          EOF
          
          # Update Gradle wrapper properties
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.5.1-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # Make gradlew executable
          chmod +x ./gradlew

      - name: Try simple build first
        working-directory: frontend/android
        run: |
          # Just try to initialize the project first
          ./gradlew tasks --info || echo "Initial tasks listing failed, but continuing with build attempt"

      - name: Build Android APK
        working-directory: frontend/android
        run: |
          # Attempt to build release APK
          ./gradlew assembleRelease --info || echo "Build failed but continuing to check outputs"
          
          # Check for any APK that might have been produced
          find . -name "*.apk" || echo "No APK files found"

      - name: Upload APK if exists
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-build-artifacts
          path: |
            frontend/android/app/build/outputs/apk/*/
            frontend/android/app/build/outputs/bundle/*/
            frontend/android/app/build/reports/
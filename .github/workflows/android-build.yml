name: Android Build

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/android-build.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: |
          npm install --legacy-peer-deps
          # Ensure expo is installed
          npm install expo@latest

      - name: Create app icons
        working-directory: frontend
        run: |
          mkdir -p src/assets
          # Generate a simple placeholder icon using Node.js
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Create a minimal 1x1 transparent PNG
            const iconData = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=', 'base64');
            
            // Write the icon files needed for Android build
            fs.writeFileSync(path.join('src', 'assets', 'icon.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'adaptive-icon.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'splash.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'favicon.png'), iconData);
          "

      - name: Update app.json for Android build
        working-directory: frontend
        run: |
          # Add required fields to app.json if they don't exist
          node -e "
            const fs = require('fs');
            const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            
            // Make sure expo config exists
            if (!appJson.expo) {
              appJson.expo = {};
            }
            
            // Ensure android config exists
            if (!appJson.expo.android) {
              appJson.expo.android = {};
            }
            
            // Make sure package name is set
            if (!appJson.expo.android.package) {
              appJson.expo.android.package = 'com.orienteeringapp.mobile';
            }
            
            // Save updated app.json
            fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
          "

      - name: Generate native Android project
        working-directory: frontend
        run: |
          # Use npx directly instead of global expo-cli
          npx expo-cli prebuild --platform android --clean --no-install

      - name: Setup Gradle compatibility
        working-directory: frontend/android
        run: |
          # Update Gradle wrapper to a compatible version
          echo "Updating Gradle wrapper to compatible version..."
          
          # Create gradle-wrapper.properties with correct version
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.5.1-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # Update build.gradle to use compatible Gradle plugin version
          echo "Updating build.gradle..."
          
          # Create a backup of the original build.gradle
          cp build.gradle build.gradle.bak
          
          # Modify the build.gradle file to use a compatible version
          sed -i 's/com.android.tools.build:gradle:[0-9.]*"/com.android.tools.build:gradle:7.3.1"/g' build.gradle
          sed -i 's/classpath("com.android.tools.build:gradle:[0-9.]*")/classpath("com.android.tools.build:gradle:7.3.1")/g' build.gradle

      - name: Build Android APK
        working-directory: frontend/android
        run: |
          # Make gradlew executable
          chmod +x ./gradlew
          ./gradlew assembleRelease --stacktrace

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: frontend/android/app/build/outputs/apk/release/app-release.apk
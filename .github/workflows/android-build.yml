name: Android Build

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/workflows/android-build.yml'
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        working-directory: frontend
        run: |
          npm install --legacy-peer-deps
          # Install expo and related packages explicitly
          npm install --save expo expo-dev-client

      - name: Debug node_modules
        working-directory: frontend
        run: |
          echo "Checking Expo installation..."
          ls -la node_modules/expo/
          echo "Checking Expo Android folder..."
          ls -la node_modules/expo/android || echo "Expo Android folder not found"
          echo "Searching for settings.gradle files in node_modules..."
          find node_modules -name "settings.gradle" | sort

      - name: Create app icons
        working-directory: frontend
        run: |
          mkdir -p src/assets
          # Generate placeholder icons
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            // Create a minimal 1x1 transparent PNG
            const iconData = Buffer.from('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNk+A8AAQUBAScY42YAAAAASUVORK5CYII=', 'base64');
            
            // Write the icon files needed for Android build
            fs.writeFileSync(path.join('src', 'assets', 'icon.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'adaptive-icon.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'splash.png'), iconData);
            fs.writeFileSync(path.join('src', 'assets', 'favicon.png'), iconData);
          "

      - name: Update app.json for Android build
        working-directory: frontend
        run: |
          # Add required fields to app.json if they don't exist
          node -e "
            const fs = require('fs');
            const appJson = JSON.parse(fs.readFileSync('app.json', 'utf8'));
            
            // Make sure expo config exists
            if (!appJson.expo) {
              appJson.expo = {};
            }
            
            // Ensure android config exists
            if (!appJson.expo.android) {
              appJson.expo.android = {};
            }
            
            // Make sure package name is set
            if (!appJson.expo.android.package) {
              appJson.expo.android.package = 'com.orienteeringapp.mobile';
            }
            
            // Save updated app.json
            fs.writeFileSync('app.json', JSON.stringify(appJson, null, 2));
          "

      - name: Create entry point files
        working-directory: frontend
        run: |
          # Create a simple index.js entry point if it doesn't exist
          if [ ! -f index.js ]; then
            echo "Creating index.js entry point..."
            cat > index.js << EOF
            import { registerRootComponent } from 'expo';
            import App from './src/App';

            // Register the main component
            registerRootComponent(App);
            EOF
          fi
          
          # Create a simple App.tsx file if it doesn't exist
          mkdir -p src
          if [ ! -f src/App.tsx ]; then
            echo "Creating App.tsx component..."
            cat > src/App.tsx << EOF
            import React from 'react';
            import { View, Text, StyleSheet } from 'react-native';

            export default function App() {
              return (
                <View style={styles.container}>
                  <Text style={styles.text}>Orienteering App</Text>
                </View>
              );
            }

            const styles = StyleSheet.create({
              container: {
                flex: 1,
                backgroundColor: '#fff',
                alignItems: 'center',
                justifyContent: 'center',
              },
              text: {
                fontSize: 24,
                fontWeight: 'bold',
              },
            });
            EOF
          fi

      - name: Generate native Android project
        working-directory: frontend
        run: |
          # Use npx directly instead of global expo-cli
          npx expo prebuild --platform android --clean --no-install

      - name: Create standalone build setup
        working-directory: frontend/android
        run: |
          # Print directory structure for debugging
          echo "Current directory structure:"
          ls -la
          
          # Create debug.keystore for app signing
          echo "Creating debug keystore for app signing..."
          mkdir -p app
          keytool -genkeypair -v -keystore app/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US" || echo "Keystore generation failed, but continuing"
          
          # Create a new simplified settings.gradle that doesn't depend on Expo scripts
          cat > settings.gradle << EOF
          rootProject.name = 'orienteeringapp'
          include ':app'
          
          // Include React Native modules automatically
          def reactNativeModules = new File(['node', '--print', 'require.resolve("react-native/package.json")'].execute(null, rootDir).text.trim()).getParentFile().parentFile
          include ':react-native-gradle-plugin'
          project(':react-native-gradle-plugin').projectDir = new File("\${reactNativeModules}/@react-native/gradle-plugin")
          
          // Manual inclusion of required modules
          include ':expo'
          project(':expo').projectDir = new File(rootDir, '../node_modules/expo/android')
          
          include ':expo-application'
          project(':expo-application').projectDir = new File(rootDir, '../node_modules/expo-application/android')
          
          include ':expo-constants'
          project(':expo-constants').projectDir = new File(rootDir, '../node_modules/expo-constants/android')
          
          include ':expo-file-system'
          project(':expo-file-system').projectDir = new File(rootDir, '../node_modules/expo-file-system/android')
          
          include ':expo-font'
          project(':expo-font').projectDir = new File(rootDir, '../node_modules/expo-font/android')
          
          include ':expo-keep-awake'
          project(':expo-keep-awake').projectDir = new File(rootDir, '../node_modules/expo-keep-awake/android')
          EOF
          
          # Create or update build.gradle with explicit versions
          cat > build.gradle << EOF
          // Top-level build file where you can add configuration options common to all sub-projects/modules.
          
          buildscript {
              ext {
                  buildToolsVersion = findProperty('android.buildToolsVersion') ?: '35.0.0'
                  minSdkVersion = Integer.parseInt(findProperty('android.minSdkVersion') ?: '24')
                  compileSdkVersion = Integer.parseInt(findProperty('android.compileSdkVersion') ?: '35')
                  targetSdkVersion = Integer.parseInt(findProperty('android.targetSdkVersion') ?: '34')
                  kotlinVersion = findProperty('android.kotlinVersion') ?: '1.9.25'
                  ndkVersion = "26.1.10909125"
                  // Add hermesEnabled for app/build.gradle
                  hermesEnabled = findProperty('expo.jsEngine') ?: "hermes"
              }
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath('com.android.tools.build:gradle:8.1.2')
                  classpath('com.facebook.react:react-native-gradle-plugin:0.73.0')
                  classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:\${kotlinVersion}")
              }
          }
          
          apply plugin: "com.facebook.react.rootproject"
          
          allprojects {
              repositories {
                  maven {
                      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
                      url(new File(['node', '--print', "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim(), '../android'))
                  }
                  maven {
                      // Android JSC is installed from npm
                      url(new File(['node', '--print', "require.resolve('jsc-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), '../dist'))
                  }
          
                  google()
                  mavenCentral()
                  maven { url 'https://www.jitpack.io' }
              }
          }
          EOF
          
          # Update app/build.gradle to ensure it has all required dependencies
          mkdir -p app
          
          # Create proguard-rules.pro file
          cat > app/proguard-rules.pro << EOF
          # Add project specific ProGuard rules here.
          # You can control the set of applied configuration files using the
          # proguardFiles setting in build.gradle.
          #
          # For more details, see
          #   http://developer.android.com/guide/developing/tools/proguard.html

          # If your project uses WebView with JS, uncomment the following
          # and specify the fully qualified class name to the JavaScript interface
          # class:
          #-keepclassmembers class fqcn.of.javascript.interface.for.webview {
          #   public *;
          #}

          # Uncomment this to preserve the line number information for
          # debugging stack traces.
          #-keepattributes SourceFile,LineNumberTable

          # If you keep the line number information, uncomment this to
          # hide the original source file name.
          #-renamesourcefileattribute SourceFile

          # Hermes
          -keep class com.facebook.hermes.unicode.** { *; }
          -keep class com.facebook.jni.** { *; }

          # React Native
          -keep,allowobfuscation @interface com.facebook.proguard.annotations.DoNotStrip
          -keep,allowobfuscation @interface com.facebook.proguard.annotations.KeepGettersAndSetters
          -keep,allowobfuscation @interface com.facebook.common.internal.DoNotStrip

          # Do not strip any method/class that is annotated with @DoNotStrip
          -keep @com.facebook.proguard.annotations.DoNotStrip class *
          -keep @com.facebook.common.internal.DoNotStrip class *
          -keepclassmembers class * {
              @com.facebook.proguard.annotations.DoNotStrip *;
              @com.facebook.common.internal.DoNotStrip *;
          }

          -keepclassmembers @com.facebook.proguard.annotations.KeepGettersAndSetters class * {
              void set*(***);
              *** get*();
          }

          -keep class * implements com.facebook.react.bridge.JavaScriptModule { *; }
          -keep class * implements com.facebook.react.bridge.NativeModule { *; }
          -keepclassmembers,includedescriptorclasses class * { native <methods>; }
          -keepclassmembers class *  { @com.facebook.react.uimanager.annotations.ReactProp <methods>; }
          -keepclassmembers class *  { @com.facebook.react.uimanager.annotations.ReactPropGroup <methods>; }

          -dontwarn com.facebook.react.**
          -keep,includedescriptorclasses class com.facebook.react.bridge.** { *; }
          EOF
          cat > app/build.gradle << EOF
          apply plugin: "com.android.application"
          apply plugin: "org.jetbrains.kotlin.android"
          apply plugin: "com.facebook.react"

          def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

          react {
              // Use a simple entry point
              entryFile = file("../index.js")
              reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
              hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
              codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
              bundleCommand = "bundle"
              
              // Autolinking
              autolinkLibrariesWithApp()
          }

          def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
          def jscFlavor = 'org.webkit:android-jsc:+'

          android {
              ndkVersion rootProject.ext.ndkVersion

              buildToolsVersion rootProject.ext.buildToolsVersion
              compileSdk rootProject.ext.compileSdkVersion

              namespace 'com.orienteeringapp.mobile'
              defaultConfig {
                  applicationId 'com.orienteeringapp.mobile'
                  minSdkVersion rootProject.ext.minSdkVersion
                  targetSdkVersion rootProject.ext.targetSdkVersion
                  versionCode 1
                  versionName "1.0.0"
              }
              signingConfigs {
                  debug {
                      storeFile file('debug.keystore')
                      storePassword 'android'
                      keyAlias 'androiddebugkey'
                      keyPassword 'android'
                  }
              }
              buildTypes {
                  debug {
                      signingConfig signingConfigs.debug
                  }
                  release {
                      signingConfig signingConfigs.debug
                      minifyEnabled enableProguardInReleaseBuilds
                      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
                  }
              }
          }

          dependencies {
              // The version of react-native is set by the React Native Gradle Plugin
              implementation("com.facebook.react:react-android")

              if (rootProject.ext.hermesEnabled.toBoolean()) {
                  implementation("com.facebook.react:hermes-android")
              } else {
                  implementation jscFlavor
              }
              
              // Add explicit dependencies for Expo modules
              implementation project(':expo')
              implementation project(':expo-application')
              implementation project(':expo-constants')
              implementation project(':expo-file-system')
              implementation project(':expo-font')
              implementation project(':expo-keep-awake')
          }
          EOF
          
          # Update Gradle wrapper properties
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties << EOF
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.5.1-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          # Make gradlew executable
          chmod +x ./gradlew

      - name: Try simple build first
        working-directory: frontend/android
        run: |
          # Just try to initialize the project first
          ./gradlew tasks --info || echo "Initial tasks listing failed, but continuing with build attempt"

      - name: Build Android APK
        working-directory: frontend/android
        run: |
          # Attempt to build release APK
          ./gradlew assembleRelease --info || echo "Build failed but continuing to check outputs"
          
          # Check for any APK that might have been produced
          find . -name "*.apk" || echo "No APK files found"

      - name: Upload APK if exists
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-build-artifacts
          path: |
            frontend/android/app/build/outputs/apk/*/
            frontend/android/app/build/outputs/bundle/*/
            frontend/android/app/build/reports/
